# -*- coding: utf-8 -*-
"""CSI數據處理.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M_grlQVQvmaarnu8X4N2mTL2YiIYIQcE

**學習如何處理csi資料 **
"""

!pip install csiread

!pip install scipy matplotlib numpy pandas

from google.colab import files
uploaded = files.upload()

filename = 'amos'

with open(filename, 'rb') as f:  # 先用二進位讀避免亂碼
    raw = f.read()

print(raw[:200])  # 先顯示前200個byte檢查格式

from google.colab import files
import numpy as np

# 上傳檔案
uploaded = files.upload()

# 取得檔名（例如 amos）
filename = list(uploaded.keys())[0]

# 採樣頻率
fs = 100  # Hz

# 讀取 raw 二進位檔案，假設每個數值是 int16
raw = np.fromfile(filename, dtype=np.int16)

# 將資料兩兩組成 I/Q 複數
i = raw[0::2]
q = raw[1::2]
csi_complex = i + 1j * q

"""計算振幅"""

# 計算振幅
amplitude = np.abs(csi_complex)

from scipy.signal import butter, filtfilt

# 建立低通濾波器
cutoff = 5  # Hz
order = 4
b, a = butter(order, cutoff / (0.5 * fs), btype='low')

# 使用 filtfilt 進行零相位濾波
amplitude_filtered = filtfilt(b, a, amplitude)

import matplotlib.pyplot as plt

# 建立時間軸
t = np.arange(len(amplitude)) / fs

plt.figure(figsize=(12, 4))
plt.plot(t, amplitude, label='Raw amplitude', alpha=0.5)
plt.plot(t, amplitude_filtered, label='Filtered amplitude', linewidth=2)
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('CSI Amplitude vs Time')
plt.legend()
plt.grid(True)
plt.show()